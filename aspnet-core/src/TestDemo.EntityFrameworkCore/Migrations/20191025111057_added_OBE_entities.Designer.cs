// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestDemo.EntityFrameworkCore;

namespace TestDemo.Migrations
{
    [DbContext(typeof(TestDemoDbContext))]
    [Migration("20191025111057_added_OBE_entities")]
    partial class added_OBE_entities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ReturnValue");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("AbpPersistedGrants");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("TestDemo.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("TestDemo.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<string>("GoogleAuthenticatorKey");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<Guid?>("ProfilePictureId");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<bool>("ShouldChangePasswordOnNextLogin");

                    b.Property<string>("SignInToken");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("TestDemo.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096);

                    b.Property<int>("ReadState");

                    b.Property<int>("ReceiverReadState");

                    b.Property<Guid?>("SharedMessageId");

                    b.Property<int>("Side");

                    b.Property<int?>("TargetTenantId");

                    b.Property<long>("TargetUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("TestDemo.EclShared.Assumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssumptionGroup");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DataType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Framework");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Assumptions");
                });

            modelBuilder.Entity("TestDemo.EclShared.EadInputAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EadGroup");

                    b.Property<int>("Framework");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EadInputAssumptions");
                });

            modelBuilder.Entity("TestDemo.EclShared.LgdInputAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DataType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Framework");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LgdGroup");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("LgdInputAssumptions");
                });

            modelBuilder.Entity("TestDemo.EclShared.PdInputAssumption12Month", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Credit");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Framework");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PD");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("SnPMappingBestFit");

                    b.Property<string>("SnPMappingEtiCreditPolicy");

                    b.HasKey("Id");

                    b.ToTable("PdInputAssumption12Months");
                });

            modelBuilder.Entity("TestDemo.EclShared.PdInputSnPCummulativeDefaultRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("Framework");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Rating");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<double?>("Value");

                    b.Property<int?>("Years");

                    b.HasKey("Id");

                    b.ToTable("PdInputSnPCummulativeDefaultRates");
                });

            modelBuilder.Entity("TestDemo.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("FriendProfilePictureId");

                    b.Property<string>("FriendTenancyName");

                    b.Property<int?>("FriendTenantId");

                    b.Property<long>("FriendUserId");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("TestDemo.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("TenantAddress");

                    b.Property<string>("TenantLegalName");

                    b.Property<string>("TenantTaxNo");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("TestDemo.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DayCount");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description");

                    b.Property<int>("EditionId");

                    b.Property<string>("ErrorUrl");

                    b.Property<string>("ExternalPaymentId");

                    b.Property<int>("Gateway");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRecurring");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("PaymentPeriodType");

                    b.Property<int>("Status");

                    b.Property<string>("SuccessUrl");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("TestDemo.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<Guid?>("CustomCssId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInTrialPeriod");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64);

                    b.Property<Guid?>("LogoId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SubscriptionEndDateUtc");

                    b.Property<int>("SubscriptionPaymentType");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("TestDemo.OBE.ObeEcl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ClosedByUserId");

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("ReportingDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEcls");
                });

            modelBuilder.Entity("TestDemo.OBE.ObeEclApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclApprovals");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssumptionGroup");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclAssumptions");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclAssumptionApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssumptionType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateReviewed");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewValue");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<string>("OldValue");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclAssumptionApprovals");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclEadInputAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EadGroup");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclEadInputAssumptions");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclLgdAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DataType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LgdGroup");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclLgdAssumptions");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclPdAssumption12Month", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Credit");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<double?>("PD");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("SnPMappingBestFit");

                    b.Property<string>("SnPMappingEtiCreditPolicy");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclPdAssumption12Months");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclPdSnPCummulativeDefaultRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<string>("Rating");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("Value");

                    b.Property<int?>("Years");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclPdSnPCummulativeDefaultRates");
                });

            modelBuilder.Entity("TestDemo.ObeComputation.ObeEclComputedEadResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LifetimeEAD");

                    b.Property<Guid?>("ObeEclDataLoanBookId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclDataLoanBookId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclComputedEadResults");
                });

            modelBuilder.Entity("TestDemo.ObeComputation.ObeEclSicr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComputedSICR");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclDataLoanBookId");

                    b.Property<string>("OverrideComment");

                    b.Property<string>("OverrideSICR");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclDataLoanBookId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclSicrs");
                });

            modelBuilder.Entity("TestDemo.ObeComputation.ObeEclSicrApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclSicrId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclSicrId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclSicrApprovals");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclDataLoanBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("BaseRate");

                    b.Property<double?>("CashFSV");

                    b.Property<double?>("CashOMV");

                    b.Property<string>("Classification");

                    b.Property<double?>("CommercialProperty");

                    b.Property<double?>("CommercialPropertyOMV");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<string>("ContractId");

                    b.Property<string>("ContractNo");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double?>("CreditLimit");

                    b.Property<double?>("CureRate");

                    b.Property<string>("Currency");

                    b.Property<double?>("CurrentContractualInterestRate");

                    b.Property<int?>("CurrentRating");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerNo");

                    b.Property<int?>("DaysPastDue");

                    b.Property<double?>("DebentureFSV");

                    b.Property<double?>("DebentureOMV");

                    b.Property<DateTime?>("DefaultDate");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double?>("EIR");

                    b.Property<bool>("GuaranteeIndicator");

                    b.Property<double?>("GuaranteeLevel");

                    b.Property<double?>("GuaranteeValue");

                    b.Property<string>("GuarantorLGD");

                    b.Property<string>("GuarantorPD");

                    b.Property<int?>("IPTOPeriod");

                    b.Property<DateTime?>("ImpairedDate");

                    b.Property<string>("InterestPaymentStructure");

                    b.Property<string>("InterestPaymentTermsOrigination");

                    b.Property<string>("InterestRateType");

                    b.Property<int?>("IntroductoryPeriod");

                    b.Property<double?>("InventoryFSV");

                    b.Property<double?>("InventoryOMV");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("LifetimePD");

                    b.Property<double?>("Month12PD");

                    b.Property<Guid?>("ObeEclUploadId");

                    b.Property<double?>("OriginalBalanceLCY");

                    b.Property<int?>("OriginalRating");

                    b.Property<string>("OriginationContractualInterestRate");

                    b.Property<double?>("OutstandingBalanceACY");

                    b.Property<double?>("OutstandingBalanceLCY");

                    b.Property<int?>("PPTOPeriod");

                    b.Property<double?>("PlantEquipmentFSV");

                    b.Property<double?>("PlantEquipmentOMV");

                    b.Property<double?>("PostIPContractualInterestRate");

                    b.Property<string>("PrincipalPaymentStructure");

                    b.Property<string>("PrincipalPaymentTermsOrigination");

                    b.Property<string>("ProductMapping");

                    b.Property<string>("ProductType");

                    b.Property<string>("RatingModel");

                    b.Property<double?>("ReceivablesFSV");

                    b.Property<double?>("ReceivablesOMV");

                    b.Property<double?>("ResidentialPropertyFSV");

                    b.Property<double?>("ResidentialPropertyOMV");

                    b.Property<DateTime?>("RestructureEndDate");

                    b.Property<bool>("RestructureIndicator");

                    b.Property<string>("RestructureRisk");

                    b.Property<DateTime?>("RestructureStartDate");

                    b.Property<string>("RestructureType");

                    b.Property<string>("Sector");

                    b.Property<string>("Segment");

                    b.Property<double?>("SharesFSV");

                    b.Property<double?>("SharesOMV");

                    b.Property<DateTime?>("SnapshotDate");

                    b.Property<string>("SpecialisedLending");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("VehicleFSV");

                    b.Property<double?>("VehicleOMV");

                    b.Property<bool>("WatchlistIndicator");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclUploadId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclDataLoanBooks");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclDataPaymentSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("Component");

                    b.Property<string>("ContractRefNo");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Frequency");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("NoOfSchedules");

                    b.Property<Guid?>("ObeEclUploadId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclUploadId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclDataPaymentSchedules");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DocType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UploadComment");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclUploads");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclUploadApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclUploadId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclUploadId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclUploadApprovals");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObeEclResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("ContractID");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerNo");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclDataLoanBookId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<double?>("OutstandingBalance");

                    b.Property<double?>("OverrideFSV");

                    b.Property<double?>("OverrideOverlay");

                    b.Property<int?>("OverrideStage");

                    b.Property<double?>("OverrideTTRYears");

                    b.Property<double?>("PostOverrideEclBest");

                    b.Property<double?>("PostOverrideEclDownturn");

                    b.Property<double?>("PostOverrideEclOptimistic");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideEclBest");

                    b.Property<double?>("PreOverrideEclDownturn");

                    b.Property<double?>("PreOverrideEclOptimistic");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<string>("ProductType");

                    b.Property<string>("Sector");

                    b.Property<string>("Segment");

                    b.Property<int?>("Stage");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclDataLoanBookId");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclResultDetails");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObeEclResultSummaryKeyInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Collateral");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double?>("Exposure");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Months12CummulativeBestPDs");

                    b.Property<double?>("Months24CummulativeBestPDs");

                    b.Property<double?>("Months6CummulativeBestPDs");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<string>("PDGrouping");

                    b.Property<double?>("PercentageOfBook");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("UnsecuredPercentage");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclResultSummaryKeyInputs");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObeEclResultSummaryTopExposure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclDataLoanBookId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<double?>("PostOverrideCoverageRatio");

                    b.Property<double?>("PostOverrideExposure");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideCoverageRatio");

                    b.Property<double?>("PreOverrideExposure");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclDataLoanBookId");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObeEclResultSummaryTopExposures");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObesaleEclResultSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("ObeEclId");

                    b.Property<double?>("PostOverrideCoverageRatio");

                    b.Property<double?>("PostOverrideExposure");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideCoverageRatio");

                    b.Property<double?>("PreOverrideExposure");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<int>("SummaryType");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ObeEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("ObesaleEclResultSummaries");
                });

            modelBuilder.Entity("TestDemo.Retail.RetailEcl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ClosedByUserId");

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime>("ReportingDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEcls");
                });

            modelBuilder.Entity("TestDemo.Retail.RetailEclApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclApprovals");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssumptionGroup");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclAssumptions");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclAssumptionApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssumptionType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateReviewed");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclAssumptionApprovals");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclEadInputAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EadGroup");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<Guid>("RetailEclId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclEadInputAssumptions");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclLgdAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DataType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LgdGroup");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclLgdAssumptions");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclPdAssumption12Month", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Credit");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PD");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<string>("SnPMappingBestFit");

                    b.Property<string>("SnPMappingEtiCreditPolicy");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclPdAssumption12Months");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclPdSnPCummulativeDefaultRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Rating");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("Value");

                    b.Property<int?>("Years");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclPdSnPCummulativeDefaultRates");
                });

            modelBuilder.Entity("TestDemo.RetailComputation.RetailEclComputedEadResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LifetimeEAD");

                    b.Property<Guid?>("RetailEclDataLoanBookId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclDataLoanBookId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclComputedEadResults");
                });

            modelBuilder.Entity("TestDemo.RetailComputation.RetailEclSicr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComputedSICR");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("OverrideComment");

                    b.Property<string>("OverrideSICR");

                    b.Property<Guid>("RetailEclDataLoanBookId");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclDataLoanBookId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclSicrs");
                });

            modelBuilder.Entity("TestDemo.RetailComputation.RetailEclSicrApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid?>("RetailEclSicrId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclSicrId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclSicrApprovals");
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclDataLoanBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("BaseRate");

                    b.Property<double?>("CashFSV");

                    b.Property<double?>("CashOMV");

                    b.Property<string>("Classification");

                    b.Property<double?>("CommercialProperty");

                    b.Property<double?>("CommercialPropertyOMV");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<string>("ContractId");

                    b.Property<string>("ContractNo");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double?>("CreditLimit");

                    b.Property<double?>("CureRate");

                    b.Property<string>("Currency");

                    b.Property<double?>("CurrentContractualInterestRate");

                    b.Property<int?>("CurrentRating");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerNo");

                    b.Property<int?>("DaysPastDue");

                    b.Property<double?>("DebentureFSV");

                    b.Property<double?>("DebentureOMV");

                    b.Property<DateTime?>("DefaultDate");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double?>("EIR");

                    b.Property<bool>("GuaranteeIndicator");

                    b.Property<double?>("GuaranteeLevel");

                    b.Property<double?>("GuaranteeValue");

                    b.Property<string>("GuarantorLGD");

                    b.Property<string>("GuarantorPD");

                    b.Property<int?>("IPTOPeriod");

                    b.Property<DateTime?>("ImpairedDate");

                    b.Property<string>("InterestPaymentStructure");

                    b.Property<string>("InterestPaymentTermsOrigination");

                    b.Property<string>("InterestRateType");

                    b.Property<int?>("IntroductoryPeriod");

                    b.Property<double?>("InventoryFSV");

                    b.Property<double?>("InventoryOMV");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("LifetimePD");

                    b.Property<double?>("Month12PD");

                    b.Property<double?>("OriginalBalanceLCY");

                    b.Property<int?>("OriginalRating");

                    b.Property<string>("OriginationContractualInterestRate");

                    b.Property<double?>("OutstandingBalanceACY");

                    b.Property<double?>("OutstandingBalanceLCY");

                    b.Property<int?>("PPTOPeriod");

                    b.Property<double?>("PlantEquipmentFSV");

                    b.Property<double?>("PlantEquipmentOMV");

                    b.Property<double?>("PostIPContractualInterestRate");

                    b.Property<string>("PrincipalPaymentStructure");

                    b.Property<string>("PrincipalPaymentTermsOrigination");

                    b.Property<string>("ProductMapping");

                    b.Property<string>("ProductType");

                    b.Property<string>("RatingModel");

                    b.Property<double?>("ReceivablesFSV");

                    b.Property<double?>("ReceivablesOMV");

                    b.Property<double?>("ResidentialPropertyFSV");

                    b.Property<double?>("ResidentialPropertyOMV");

                    b.Property<DateTime?>("RestructureEndDate");

                    b.Property<bool>("RestructureIndicator");

                    b.Property<string>("RestructureRisk");

                    b.Property<DateTime?>("RestructureStartDate");

                    b.Property<string>("RestructureType");

                    b.Property<Guid>("RetailEclUploadId");

                    b.Property<string>("Sector");

                    b.Property<string>("Segment");

                    b.Property<double?>("SharesFSV");

                    b.Property<double?>("SharesOMV");

                    b.Property<DateTime?>("SnapshotDate");

                    b.Property<string>("SpecialisedLending");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("VehicleFSV");

                    b.Property<double?>("VehicleOMV");

                    b.Property<bool>("WatchlistIndicator");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclUploadId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclDataLoanBooks");
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclDataPaymentSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("Component");

                    b.Property<string>("ContractRefNo");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Frequency");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("NoOfSchedules");

                    b.Property<Guid>("RetailEclUploadId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclUploadId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclDataPaymentSchedules");
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DocType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("RetailEclId");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UploadComment");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclUploads");
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclUploadApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<Guid>("RetailEclUploadId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclUploadId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclUploadApprovals");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("ContractID");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerNo");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("OutstandingBalance");

                    b.Property<double?>("OverrideFSV");

                    b.Property<double?>("OverrideOverlay");

                    b.Property<int?>("OverrideStage");

                    b.Property<double?>("OverrideTTRYears");

                    b.Property<double?>("PostOverrideEclBest");

                    b.Property<double?>("PostOverrideEclDownturn");

                    b.Property<double?>("PostOverrideEclOptimistic");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideEclBest");

                    b.Property<double?>("PreOverrideEclDownturn");

                    b.Property<double?>("PreOverrideEclOptimistic");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<string>("ProductType");

                    b.Property<Guid?>("RetailEclDataLoanBookId");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<string>("Sector");

                    b.Property<string>("Segment");

                    b.Property<int?>("Stage");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclDataLoanBookId");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclResultDetails");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PostOverrideCoverageRatio");

                    b.Property<double?>("PostOverrideExposure");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideCoverageRatio");

                    b.Property<double?>("PreOverrideExposure");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<int>("SummaryType");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclResultSummaries");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultSummaryKeyInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Collateral");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double?>("Exposure");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Months12CummulativeBestPDs");

                    b.Property<double?>("Months24CummulativeBestPDs");

                    b.Property<double?>("Months6CummulativeBestPDs");

                    b.Property<string>("PDGrouping");

                    b.Property<double?>("PercentageOfBook");

                    b.Property<Guid?>("RetailEclId");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("UnsecuredPercentage");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclResultSummaryKeyInputs");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultSummaryTopExposure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PostOverrideCoverageRatio");

                    b.Property<double?>("PostOverrideExposure");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideCoverageRatio");

                    b.Property<double?>("PreOverrideExposure");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<Guid?>("RetailEclDataLoanBookId");

                    b.Property<Guid>("RetailEclId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RetailEclDataLoanBookId");

                    b.HasIndex("RetailEclId");

                    b.HasIndex("TenantId");

                    b.ToTable("RetailEclResultSummaryTopExposures");
                });

            modelBuilder.Entity("TestDemo.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("TestDemo.Wholesale.WholesaleEcl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ClosedByUserId");

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<bool>("IsApproved");

                    b.Property<DateTime>("ReportingDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ClosedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("WholesaleEcls");
                });

            modelBuilder.Entity("TestDemo.Wholesale.WholesaleEclApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclApprovals");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssumptionGroup");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclAssumptions");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclAssumptionApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AssumptionId");

                    b.Property<int>("AssumptionType");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("DateReviewed");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<int>("Status");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclAssumptionApprovals");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclEadInputAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Datatype");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("EadGroup");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclEadInputAssumptions");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclLgdAssumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("DataType");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("InputName");

                    b.Property<bool>("IsComputed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("LgdGroup");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclLgdAssumptions");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclPdAssumption12Month", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("Credit");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PD");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<string>("SnPMappingBestFit");

                    b.Property<string>("SnPMappingEtiCreditPolicy");

                    b.Property<int?>("TenantId");

                    b.Property<Guid?>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclPdAssumption12Months");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclPdSnPCummulativeDefaultRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Rating");

                    b.Property<bool>("RequiresGroupApproval");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("Value");

                    b.Property<Guid?>("WholesaleEclId");

                    b.Property<int?>("Years");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclPdSnPCummulativeDefaultRates");
                });

            modelBuilder.Entity("TestDemo.WholesaleComputation.WholesaleEclComputedEadResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("LifetimeEAD");

                    b.Property<int?>("TenantId");

                    b.Property<Guid?>("WholesaleEclDataLoanBookId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclDataLoanBookId");

                    b.ToTable("WholesaleEclComputedEadResults");
                });

            modelBuilder.Entity("TestDemo.WholesaleComputation.WholesaleEclSicr", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComputedSICR");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("OverrideComment");

                    b.Property<string>("OverrideSICR");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("WholesaleEclDataLoanBookId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclDataLoanBookId");

                    b.ToTable("WholesaleEclSicrs");
                });

            modelBuilder.Entity("TestDemo.WholesaleComputation.WholesaleEclSicrApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<Guid?>("WholesaleEclSicrId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclSicrId");

                    b.ToTable("WholesaleEclSicrApprovals");
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclDataLoanBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("BaseRate");

                    b.Property<double?>("CashFSV");

                    b.Property<double?>("CashOMV");

                    b.Property<string>("Classification");

                    b.Property<double?>("CommercialProperty");

                    b.Property<double?>("CommercialPropertyOMV");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<string>("ContractId");

                    b.Property<string>("ContractNo");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<double?>("CreditLimit");

                    b.Property<double?>("CureRate");

                    b.Property<string>("Currency");

                    b.Property<double?>("CurrentContractualInterestRate");

                    b.Property<int?>("CurrentRating");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerNo");

                    b.Property<int?>("DaysPastDue");

                    b.Property<double?>("DebentureFSV");

                    b.Property<double?>("DebentureOMV");

                    b.Property<DateTime?>("DefaultDate");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double?>("EIR");

                    b.Property<bool>("GuaranteeIndicator");

                    b.Property<double?>("GuaranteeLevel");

                    b.Property<double?>("GuaranteeValue");

                    b.Property<string>("GuarantorLGD");

                    b.Property<string>("GuarantorPD");

                    b.Property<int?>("IPTOPeriod");

                    b.Property<DateTime?>("ImpairedDate");

                    b.Property<string>("InterestPaymentStructure");

                    b.Property<string>("InterestPaymentTermsOrigination");

                    b.Property<string>("InterestRateType");

                    b.Property<int?>("IntroductoryPeriod");

                    b.Property<double?>("InventoryFSV");

                    b.Property<double?>("InventoryOMV");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("LifetimePD");

                    b.Property<double?>("Month12PD");

                    b.Property<double?>("OriginalBalanceLCY");

                    b.Property<int?>("OriginalRating");

                    b.Property<string>("OriginationContractualInterestRate");

                    b.Property<double?>("OutstandingBalanceACY");

                    b.Property<double?>("OutstandingBalanceLCY");

                    b.Property<int?>("PPTOPeriod");

                    b.Property<double?>("PlantEquipmentFSV");

                    b.Property<double?>("PlantEquipmentOMV");

                    b.Property<double?>("PostIPContractualInterestRate");

                    b.Property<string>("PrincipalPaymentStructure");

                    b.Property<string>("PrincipalPaymentTermsOrigination");

                    b.Property<string>("ProductMapping");

                    b.Property<string>("ProductType");

                    b.Property<string>("RatingModel");

                    b.Property<double?>("ReceivablesFSV");

                    b.Property<double?>("ReceivablesOMV");

                    b.Property<double?>("ResidentialPropertyFSV");

                    b.Property<double?>("ResidentialPropertyOMV");

                    b.Property<DateTime?>("RestructureEndDate");

                    b.Property<bool>("RestructureIndicator");

                    b.Property<string>("RestructureRisk");

                    b.Property<DateTime?>("RestructureStartDate");

                    b.Property<string>("RestructureType");

                    b.Property<string>("Sector");

                    b.Property<string>("Segment");

                    b.Property<double?>("SharesFSV");

                    b.Property<double?>("SharesOMV");

                    b.Property<DateTime?>("SnapshotDate");

                    b.Property<string>("SpecialisedLending");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("VehicleFSV");

                    b.Property<double?>("VehicleOMV");

                    b.Property<bool>("WatchlistIndicator");

                    b.Property<Guid>("WholesaleEclUploadId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclUploadId");

                    b.ToTable("WholesaleEclDataLoanBooks");
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclDataPaymentSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Amount");

                    b.Property<string>("Component");

                    b.Property<string>("ContractRefNo");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Frequency");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("NoOfSchedules");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("WholesaleEclUploadId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclUploadId");

                    b.ToTable("WholesaleEclDataPaymentSchedules");
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DocType");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<string>("UploadComment");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclUploads");
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclUploadApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("ReviewComment");

                    b.Property<long?>("ReviewedByUserId");

                    b.Property<DateTime?>("ReviewedDate");

                    b.Property<int>("Status");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("WholesaleEclUploadId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclUploadId");

                    b.ToTable("WholesaleEclUploadApprovals");
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNo");

                    b.Property<string>("ContractID");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("CustomerNo");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("OutstandingBalance");

                    b.Property<double?>("OverrideFSV");

                    b.Property<double?>("OverrideOverlay");

                    b.Property<int?>("OverrideStage");

                    b.Property<double?>("OverrideTTRYears");

                    b.Property<double?>("PostOverrideEclBest");

                    b.Property<double?>("PostOverrideEclDownturn");

                    b.Property<double?>("PostOverrideEclOptimistic");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideEclBest");

                    b.Property<double?>("PreOverrideEclDownturn");

                    b.Property<double?>("PreOverrideEclOptimistic");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<string>("ProductType");

                    b.Property<string>("Sector");

                    b.Property<string>("Segment");

                    b.Property<int?>("Stage");

                    b.Property<int?>("TenantId");

                    b.Property<Guid?>("WholesaleEclDataLoanBookId");

                    b.Property<Guid?>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclDataLoanBookId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclResultDetails");
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PostOverrideCoverageRatio");

                    b.Property<double?>("PostOverrideExposure");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideCoverageRatio");

                    b.Property<double?>("PreOverrideExposure");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<int>("SummaryType");

                    b.Property<int?>("TenantId");

                    b.Property<string>("Title");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclResultSummaries");
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultSummaryKeyInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Collateral");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<double?>("Exposure");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("Months12CummulativeBestPDs");

                    b.Property<double?>("Months24CummulativeBestPDs");

                    b.Property<double?>("Months6CummulativeBestPDs");

                    b.Property<string>("PDGrouping");

                    b.Property<double?>("PercentageOfBook");

                    b.Property<int?>("TenantId");

                    b.Property<double?>("UnsecuredPercentage");

                    b.Property<Guid?>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclResultSummaryKeyInputs");
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultSummaryTopExposure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContractId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<double?>("PostOverrideCoverageRatio");

                    b.Property<double?>("PostOverrideExposure");

                    b.Property<double?>("PostOverrideImpairment");

                    b.Property<double?>("PreOverrideCoverageRatio");

                    b.Property<double?>("PreOverrideExposure");

                    b.Property<double?>("PreOverrideImpairment");

                    b.Property<int?>("TenantId");

                    b.Property<Guid?>("WholesaleEclDataLoanBookId");

                    b.Property<Guid>("WholesaleEclId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WholesaleEclDataLoanBookId");

                    b.HasIndex("WholesaleEclId");

                    b.ToTable("WholesaleEclResultSummaryTopExposures");
                });

            modelBuilder.Entity("TestDemo.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice");

                    b.Property<int?>("ExpiringEditionId");

                    b.Property<decimal?>("MonthlyPrice");

                    b.Property<int?>("TrialDayCount");

                    b.Property<int?>("WaitingDayAfterExpire");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("TestDemo.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("TestDemo.Authorization.Roles.Role", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("TestDemo.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("TestDemo.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("TestDemo.Authorization.Users.User", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("TestDemo.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("TestDemo.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("TestDemo.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("TestDemo.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("TestDemo.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("TestDemo.OBE.ObeEcl", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ClosedByUserFk")
                        .WithMany()
                        .HasForeignKey("ClosedByUserId");
                });

            modelBuilder.Entity("TestDemo.OBE.ObeEclApproval", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclAssumption", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclAssumptionApproval", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclEadInputAssumption", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclLgdAssumption", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclPdAssumption12Month", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeAssumption.ObeEclPdSnPCummulativeDefaultRate", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeComputation.ObeEclComputedEadResult", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclDataLoanBook", "ObeEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("ObeEclDataLoanBookId");
                });

            modelBuilder.Entity("TestDemo.ObeComputation.ObeEclSicr", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclDataLoanBook", "ObeEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("ObeEclDataLoanBookId");
                });

            modelBuilder.Entity("TestDemo.ObeComputation.ObeEclSicrApproval", b =>
                {
                    b.HasOne("TestDemo.ObeComputation.ObeEclSicr", "ObeEclSicrFk")
                        .WithMany()
                        .HasForeignKey("ObeEclSicrId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclDataLoanBook", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclUpload", "ObeEclUploadFk")
                        .WithMany()
                        .HasForeignKey("ObeEclUploadId");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclDataPaymentSchedule", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclUpload", "ObeEclUploadFk")
                        .WithMany()
                        .HasForeignKey("ObeEclUploadId");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclUpload", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeInputs.ObeEclUploadApproval", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclUpload", "ObeEclUploadFk")
                        .WithMany()
                        .HasForeignKey("ObeEclUploadId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObeEclResultDetail", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclDataLoanBook", "ObeEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("ObeEclDataLoanBookId");

                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObeEclResultSummaryKeyInput", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObeEclResultSummaryTopExposure", b =>
                {
                    b.HasOne("TestDemo.ObeInputs.ObeEclDataLoanBook", "ObeEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("ObeEclDataLoanBookId");

                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.ObeResults.ObesaleEclResultSummary", b =>
                {
                    b.HasOne("TestDemo.OBE.ObeEcl", "ObeEclFk")
                        .WithMany()
                        .HasForeignKey("ObeEclId");
                });

            modelBuilder.Entity("TestDemo.Retail.RetailEcl", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ClosedByUserFk")
                        .WithMany()
                        .HasForeignKey("ClosedByUserId");
                });

            modelBuilder.Entity("TestDemo.Retail.RetailEclApproval", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclAssumption", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclAssumptionApproval", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclEadInputAssumption", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclLgdAssumption", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclPdAssumption12Month", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailAssumption.RetailEclPdSnPCummulativeDefaultRate", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailComputation.RetailEclComputedEadResult", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclDataLoanBook", "RetailEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("RetailEclDataLoanBookId");
                });

            modelBuilder.Entity("TestDemo.RetailComputation.RetailEclSicr", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclDataLoanBook", "RetailEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("RetailEclDataLoanBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.RetailComputation.RetailEclSicrApproval", b =>
                {
                    b.HasOne("TestDemo.RetailComputation.RetailEclSicr", "RetailEclSicrFk")
                        .WithMany()
                        .HasForeignKey("RetailEclSicrId");

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclDataLoanBook", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclUpload", "RetailEclUploadFk")
                        .WithMany()
                        .HasForeignKey("RetailEclUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclDataPaymentSchedule", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclUpload", "RetailEclUploadFk")
                        .WithMany()
                        .HasForeignKey("RetailEclUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclUpload", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.RetailInputs.RetailEclUploadApproval", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclUpload", "RetailEclUploadFk")
                        .WithMany()
                        .HasForeignKey("RetailEclUploadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultDetail", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclDataLoanBook", "RetailEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("RetailEclDataLoanBookId");

                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultSummary", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultSummaryKeyInput", b =>
                {
                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId");
                });

            modelBuilder.Entity("TestDemo.RetailResults.RetailEclResultSummaryTopExposure", b =>
                {
                    b.HasOne("TestDemo.RetailInputs.RetailEclDataLoanBook", "RetailEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("RetailEclDataLoanBookId");

                    b.HasOne("TestDemo.Retail.RetailEcl", "RetailEclFk")
                        .WithMany()
                        .HasForeignKey("RetailEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.Wholesale.WholesaleEcl", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ClosedByUserFk")
                        .WithMany()
                        .HasForeignKey("ClosedByUserId");
                });

            modelBuilder.Entity("TestDemo.Wholesale.WholesaleEclApproval", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");

                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclAssumption", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclAssumptionApproval", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");

                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclEadInputAssumption", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclLgdAssumption", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclPdAssumption12Month", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId");
                });

            modelBuilder.Entity("TestDemo.WholesaleAssumption.WholesaleEclPdSnPCummulativeDefaultRate", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId");
                });

            modelBuilder.Entity("TestDemo.WholesaleComputation.WholesaleEclComputedEadResult", b =>
                {
                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclDataLoanBook", "WholesaleEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclDataLoanBookId");
                });

            modelBuilder.Entity("TestDemo.WholesaleComputation.WholesaleEclSicr", b =>
                {
                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclDataLoanBook", "WholesaleEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclDataLoanBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleComputation.WholesaleEclSicrApproval", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");

                    b.HasOne("TestDemo.WholesaleComputation.WholesaleEclSicr", "WholesaleEclSicrFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclSicrId");
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclDataLoanBook", b =>
                {
                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclUpload", "WholesaleEclUploadFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclDataPaymentSchedule", b =>
                {
                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclUpload", "WholesaleEclUploadFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclUpload", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleInputs.WholesaleEclUploadApproval", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User", "ReviewedByUserFk")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId");

                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclUpload", "WholesaleEclUploadFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclUploadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultDetail", b =>
                {
                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclDataLoanBook", "WholesaleEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclDataLoanBookId");

                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId");
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultSummary", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultSummaryKeyInput", b =>
                {
                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId");
                });

            modelBuilder.Entity("TestDemo.WholesaleResults.WholesaleEclResultSummaryTopExposure", b =>
                {
                    b.HasOne("TestDemo.WholesaleInputs.WholesaleEclDataLoanBook", "WholesaleEclDataLoanBookFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclDataLoanBookId");

                    b.HasOne("TestDemo.Wholesale.WholesaleEcl", "WholesaleEclFk")
                        .WithMany()
                        .HasForeignKey("WholesaleEclId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("TestDemo.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("TestDemo.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
